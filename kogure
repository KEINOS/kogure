#!/usr/bin/env php
<?php
/**
 * KOGURE Daemon
 * =============
 *   A daemon like CLI app to let your script run in background. Simple
 *  alternative of `service.d` or `init.d`.
 *
 * Installation:
 *   Place this app in to the path of a PATH env variable such as $ENV. See
 * README.md for detals.
 *
 * Usage:
 *   $ kogure --help
 *
 * For the latest version see:
 *   https://github.com/KEINOS/kogure
 */

/* [Constants] ============================================================== */

const VER_APP        = '1.0.0-beta(20181209)';
const NAME_FILE_JSON = 'kogure_allow.json'; // White list of allowed apps to run

// aliases
const DIR_SEP   = DIRECTORY_SEPARATOR;
const LOCKED    = true;
const UNLOCKED  = false;
const STATUS_OK = 0;
const AS_STRICT = true;
const AS_RETURN = true; // return value instead of print
const NOT_FOUND = false;
const SUCCESS   = true;
const FAILURE   = false;

// PATHs
define('NAME_APP_SELF', basename(__FILE__));
define('NAME_DIR_JSON', '.' . NAME_APP_SELF); // dot dir as hidden
define('PATH_DIR_APP_SELF', dirname(__FILE__));
define('PATH_DIR_HOME', getPathDirUserHome());

/* [User settings] ========================================================== */

// Path of white list in JSON.
// If empty, it uses default path such as: ~/.kogure/kogure_allow.json
$path_file_json_allow = ''; //

/* "kogure_allow.json" format:
{
    "<name_script>": "</path/to/script/file/with/shebang/>",
    "sample1": "/path/to/script/MyScript1"
}
*/

/* [Common settings] ======================================================== */

// Define first input argument allowed
$list_types_allow_arg1 = [
    'start', 'stop', 'restart', 'status',
    'help', '-h', '--help',
    'list', '-l', '--list',
];

// Load allowed script name as second input argument and it's file path
$list_path_allow       = loadFileJsonListAllow(getPathFileJson());
$list_types_allow_arg2 = array_keys($list_path_allow);
// Add extra 2nd arg value for 'kogure restart all'
$list_types_allow_arg2[] = 'all';


/* [Main] =================================================================== */

if (! isCli()) {
    dieMsg('Error: Not running from CLI.', __LINE__);
}

// Get input command argument
$arg_1st = getArgInput1st();
$arg_2nd = getArgInput2nd();

try {
    switch ($arg_1st) {
        case 'help':
        case '--help':
        case '-h':
            printHelp();
            break;
        case 'list':
        case '--list':
        case '-l':
            printList();
            break;
        case 'start':
            if ('all' === $arg_2nd) {
                signalStartAll();
                break;
            }
            $path_file = getPathFileFromArg2($arg_2nd);
            signalStart($path_file);
            break;
        case 'stop':
            if ('all' === $arg_2nd) {
                signalStopAll();
                break;
            }
            $path_file = getPathFileFromArg2($arg_2nd);
            signalStop($path_file);
            break;
        case 'restart':
            if ('all' === $arg_2nd) {
                signalRestartAll();
                break;
            }
            $path_file = getPathFileFromArg2($arg_2nd);
            signalRestart($path_file);
            break;
        case 'status':
            printStatus();
            break;
        default:
            $msg = 'Undefined argument given.';
            throw new \InvalidArgumentException($msg);
            break;
    }
} catch (Exception $e) {
    dieMsg($e->getMessage(), __LINE__);
}

exit(STATUS_OK);

/* [Functions] ============================================================== */

/* ---------------------------------------------------------------------- [D] */

function dieMsg($msg, $status = STATUS_OK)
{
    $status = (int) $status;

    if (! is_string($msg)) {
        $msg = print_r($msg, AS_RETURN);
    }

    if (! isCli()) {
        $etag = hash('md5', $msg);
        header('content-type: text/plain; charset=utf-8');
        header("ETag: \"{$etag}\"");
    }

    if (STATUS_OK === $status) {
        echo $msg, PHP_EOL;
        exit(STATUS_OK);
    }

    $num_line_called = getValue('line', debug_backtrace(), $status);
    echo rtrim($msg), " (Thrown form line: {$num_line_called})", PHP_EOL;

    exit($status);
}

/* ---------------------------------------------------------------------- [G] */

function getArgInput1st()
{
    global $argv, $argc;

    if (1 === $argc) {
        dieMsg('Missing argument. See help.(-h, --help)', __LINE__);
    }

    $arg_1st = getValue(1, $argv);

    if (! isInArgList1st($arg_1st)) {
        $msg = 'Invalid 1st argument. See help. (-h, --help)';
        dieMsg($msg, __LINE__);
    }

    return $arg_1st;
}

function getArgInput2nd()
{
    global $argv, $argc;

    if (3 !== $argc) {
        return '';
    }

    $arg_2nd = getValue(2, $argv);

    if (! isInArgList2nd($arg_2nd)) {
        dieMsg('Invalid 2nd argument. See help. (-h, --help)', __LINE__);
    }

    return $arg_2nd;
}

function getListAllowedArg1()
{
    global $list_types_allow_arg1;
    return $list_types_allow_arg1;
}

function getListAllowedArg2()
{
    global $list_types_allow_arg2;
    return $list_types_allow_arg2;
}

function getListNameScriptAvailable()
{
    global $list_path_allow;
    // Returns only script names
    return array_keys($list_path_allow);
}

function getNameAppSelf()
{
    global $argv;

    return basename($argv[0]);
}

function getNameFileJson()
{
    return NAME_FILE_JSON;
}

function getPathDirAppSelf()
{
    return dirname($_SERVER['SCRIPT_FILENAME']);
}

function getPathDirAppSelfReal()
{
    return dirname(__FILE__);
}

function getPathDirUserHome()
{
    return posix_getpwuid(posix_geteuid())['dir'];
}

function getPathFileFromArg2($key)
{
    global $list_path_allow;

    $path_file = getValue($key, $list_path_allow, NOT_FOUND);

    if (NOT_FOUND === $path_file) {
        $msg = 'Invalid 2nd argument. See help. (-h, --help)';
        dieMsg($msg, __LINE__);
    }

    if (! file_exists($path_file)) {
        $msg = 'Invalid file path of the script.(File not found).';
        dieMsg($msg, __LINE__);
    }

    return $path_file;
}

function getPathFileJson()
{
    global $path_file_json_allow;

    if (empty($path_file_json_allow)) {
        //return getPathDirAppSelf() . DIR_SEP . $name_file_json;
        //return getPathDirAppSelfReal() . DIR_SEP . $name_file_json;

        $name_file_json = getNameFileJson();
        $path_dir_json  = PATH_DIR_HOME . DIR_SEP . NAME_DIR_JSON;

        return $path_dir_json . DIR_SEP . $name_file_json;
    }
    
    if (file_exists($path_file_json_allow) && is_file($path_file_json_allow)) {
        return $path_file_json_allow;
    }
}

function getPID($path_file)
{
    $command  = "ps aux | grep {$path_file} | grep -v grep | ";
    $command .= 'awk \'{ print $2 }\'';

    return getValue('last_line', runCmd($command));
}

function getStatusAll()
{
    global $list_path_allow;

    $result = [];
    foreach ($list_path_allow as $name_script => $path_file) {
        $status_isLocked = false;
        $status_pid      = '';

        if (LOCKED === isFileLocked($path_file)) {
            $status_pid      = getPID($path_file);
            $status_isLocked = LOCKED;
        }

        $result[] = [
            'name'      => $name_script,
            'isLocked'  => $status_isLocked,
            'pid'       => $status_pid,
            'path_file' => $path_file,
        ];
    }

    return $result;
}

function getValue($key, array $array, $default = false)
{
    return isset($array[$key]) ? $array[$key] : $default;
}

function getVersionAppSelf()
{
    return VER_APP;
}

/* ---------------------------------------------------------------------- [H] */

function hasFileDescriptorRedirect($string)
{
    $string = str_replace(' ', '', $string);

    return (false === strpos($string, '2>&1')) ? false : true;
}

/* ---------------------------------------------------------------------- [I] */

function isCli()
{
    return PHP_SAPI === 'cli' || empty($_SERVER['REMOTE_ADDR']);
}

function isInArgList1st($value)
{
    $array = getListAllowedArg1();

    return in_array($value, $array, AS_STRICT);
}

function isInArgList2nd($value)
{
    $array = getListAllowedArg2();

    return in_array($value, $array, AS_STRICT);
}

function isFileLocked($path_file)
{
    static $fp;

    $path_file = realpath($path_file);

    if (! is_file($path_file)) {
        throw new \RuntimeException('File to run not found.');
    }

    $fp = fopen($path_file, 'r');

    if (false === is_resource($fp)) {
        throw new \RuntimeException('Unable open file.');
    }

    $wouldBlock = false;

    if (false === flock($fp, LOCK_EX|LOCK_NB, $wouldBlock)) {
        if ($wouldBlock) {
            return LOCKED;
        }

        throw new \RuntimeException('Unable lock file.');
    }

    return UNLOCKED;
}

function isScriptRunning($path_file)
{
    return (LOCKED === isFileLocked($path_file));
}

/* ---------------------------------------------------------------------- [K] */

function killPidScript($path_file)
{
    $command  = "ps aux | grep {$path_file} | grep -v grep | ";
    $command .= 'awk \'{ print "kill -9", $2 }\' | sh';

    $result = getValue('is_success', runCmd($command));

    return $result;
}

/* ---------------------------------------------------------------------- [L] */

function loadFileJsonListAllow($path_file)
{
    $path_file_json = realpath($path_file);
        
    if (! file_exists($path_file_json)) {
        $msg  = 'Error while loading json file. File not found at: ';
        $msg .= $path_file;
        dieMsg($msg, __LINE__);
    }

    $json = file_get_contents($path_file_json);
    $list = json_decode($json, JSON_OBJECT_AS_ARRAY);
    
    if (null === $list) {
        $msg  = 'Error while loading json file. Invalid json format at: ';
        $msg .= $path_file_json;
        dieMsg($msg, __LINE__);
    }
    
    foreach ($list as $path_file_script) {
        if (! file_exists($path_file_script) || ! is_file($path_file_script)) {
            $msg  = 'Error while loading json file. Invalid script path at: ';
            $msg .= $path_file_script;
            dieMsg($msg, __LINE__);
        }
    }

    return $list;
}

/* ---------------------------------------------------------------------- [P] */

function printHelp()
{
    $name_app_self    = getNameAppSelf();
    $version_app_self = getVersionAppSelf();
    $scripts_allowed  = trim(implode(', ', getListNameScriptAvailable()));
    $path_file_json   = getPathFileJson();

    echo <<<EOL
--------------------------------------------------------------------------------
{$name_app_self} {$version_app_self}

  '{$name_app_self}' is a daemon like command which runs your script in background. You can start, stop them and/or see their running status.
--------------------------------------------------------------------------------
USAGE:
  {$name_app_self} <ARGS> [<SCRIPT NAME>][<OPTION>]

ARGS:
  help, -h, --help
      This help.
  list, -l, --list
      Lists the available script names to use.
  start
      Starts the script and returns the PID.
      If the script is running already, then returns it's PID.
  stop
      Stops the script.
      With 'all' option will stop all the scripts.
  restart
      Re-starts/starts the script and returns the PID.
      With 'all' option will restart all the running scripts.
  status
      Returns the current statuses, PIDs of the script.

SCRIPT NAME:
Name of the script to run. Only allowed scripts can be run. Allowed script names are:

  {$scripts_allowed}

OPTION:
  all
      Option for 'stop' or 'restart'.

NOTE:
- To add/delete the scripts of SCRIPT NAME, edit the JSON file below:
    {$path_file_json}
- The script must have a valid shebang and mode as executable.
- Details: https://github.com/KEINOS/kogure

{$name_app_self} Version {$version_app_self}

EOL;
}

function printList(){
    echo trim(implode(', ', getListNameScriptAvailable()));
}

function printStatus()
{
    $listStatus = getStatusAll();
    foreach ($listStatus as $status) {
        $name     = getValue('name', $status);
        $isLocked = getValue('isLocked', $status, false);
        $pid      = ($isLocked) ? getValue('pid', $status) : '';
        $msg      = ($isLocked) ? "On (PID: {$pid})" : 'Off';

        echo $name, "\t", $msg, PHP_EOL;
    }
}

/* ---------------------------------------------------------------------- [R] */

function runCmd($command)
{
    if (! hasFileDescriptorRedirect($command)) {
        $command = $command . ' 2>&1';
    }

    $output     = [];
    $return_var = 1;
    $last_line  = exec($command, $output, $return_var);
    $result     = (0 ===$return_var);

    return [
        'is_success' => $result,
        'status'     => $return_var,
        'output'     => $output,
        'last_line'  => $last_line,
    ];
}

function runCmdNohup($path_file)
{
    $path_file = realpath($path_file);

    if (false === $path_file) {
        throw new \RuntimeException('No file found to run.');
    }

    $command = 'nohup '. $path_file .' > /dev/null 2>&1 & echo $!';

    $results = runCmd($command);

    if (! getValue('is_success', $results)) {
        $msg  = 'Error while running command.' . PHP_EOL;
        $msg .= implode(PHP_EOL, getValue('output', $results));

        throw new \RuntimeException($msg);
    }

    $pid = (int) getValue('last_line', $results);

    return $pid;
}

/* ---------------------------------------------------------------------- [S] */

function signalRestart($path_file)
{
    if (! isScriptRunning($path_file)) {
        return signalStart($path_file);
    }

    signalStop($path_file);

    while (isScriptRunning($path_file)) {
        sleep(1);
    }

    return signalStart($path_file);
}

function signalRestartAll()
{
    echo 'Re-starting scripts running already...', PHP_EOL;

    $result = SUCCESS;
    $list   = getStatusAll();
    foreach ($list as $status) {
        $name_script = getValue('name', $status);
        $isLocked    = getValue('isLocked', $status, false);
        $pid_script  = getValue('pid', $status, '');
        $path_file   = getValue('path_file', $status, null);

        echo PHP_EOL;
        echo "- {$name_script} ... ";

        if ((! $isLocked) || empty($pid_script)) {
            echo 'Not running.(SKIP)', PHP_EOL;
            continue;
        }

        echo "Re-starting.(PID:{$pid_script})", PHP_EOL;
        $result = $result && signalRestart($path_file); //Flag down on fail
    }

    return $result ? SUCCESS : FAILURE;
}

function signalStart($path_file)
{
    if (isScriptRunning($path_file)) {
        $pid = getPID($path_file);
        echo 'Process is already running.', PHP_EOL;
        echo 'PID: ', $pid, PHP_EOL;

        return $pid ? SUCCESS : FAILURE;
    }

    $pid = runCmdNohup($path_file);
    echo 'Process started.', PHP_EOL;
    echo 'PID: ', $pid, PHP_EOL;

    return $pid ? SUCCESS : FAILURE;
}

function signalStartAll(){
    echo '\'start all\' option is not allowed. Start individually.', PHP_EOL;
    return FAILURE;
}

function signalStop($path_file)
{
    $pid = getPID($path_file);

    if (empty($pid)) {
        echo 'Process already stopped.', PHP_EOL;
        return SUCCESS;
    }

    if (! killPidScript($path_file)) {
        $msg = "Error while stopping process: {$pid}";
        throw new \RuntimeException($msg);
    }

    echo "Process {$pid} stopped.", PHP_EOL;

    return SUCCESS;
}

function signalStopAll()
{
    echo 'Stopping all process ...', PHP_EOL;

    $result = SUCCESS;
    $list   = getStatusAll();
    foreach ($list as $status) {
        $name_script = getValue('name', $status);
        $path_file   = getValue('path_file', $status, null);
        echo "- {$name_script} ... ";
        $result = $result && signalStop($path_file); //Flag down on fail
    }

    return $result ? SUCCESS : FAILURE;
}
